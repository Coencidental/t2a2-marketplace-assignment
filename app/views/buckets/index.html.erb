<% provide :head_tags do %>
    <meta name='turbolinks-visit-control' content='reload'>
<% end %>

<% if params[:search] == nil %>
<div class="bucketsinfo">
  <p>Hey look down there, it's you, <%= current_user.username %>!  Though, maybe you should zoom out to find out some products!</p>
</div>
<% end %>



<% if !@allitems %>
<div id="map">
</div>
<% end %>


<div class="search">
  <%= form_tag(buckets_path, method: :get) do %>
    <%= text_field_tag :search, params[:search] %>
    <%= submit_tag 'Search products' %>
  <% end %>
</div>



<div class="allbuckets">

  <% if @allitems %>

    <% @allitems.each do |item| %>
      <div class="bucketcard">
        <div>
        <p>Name: <%= link_to item.name, bucket_item_path(item, item.id, item.bucket.id) %></p>
        <p>User: <%= link_to item.bucket.user.username, user_profile_path(item.bucket.user) %></p>
        </div>
        <div>
        <p>Description: <%= item.description %></p>
        </div>
      </div>
    <% end %>
    
  <% else %>

    <% @sortedusers.each do |user| %>
      <% user[1].user.buckets.each do |bucket| %>
        <div class="bucketcard">

          <div>
            <p>Name: <%= link_to bucket.name, bucket_path(bucket) %></p>
            <p>User: <%= link_to bucket.user.username, user_profile_path(bucket.user) %></p>
            <p><%= user[0].round(2) %> kilometers away</p>
          </div>

          <div>
          <p>Description: <%= bucket.description %></p>
          </div>

        </div>

        <% if bucket.user == current_user %>
          <div class="bucketcard">
            <p><%= link_to "Delete this bucket", bucket_destroy_path(bucket), :data => {:confirm => 'Are you sure?  This will delete any items in the bucket too.'} %></p>
            <p><%= link_to "Edit this bucket", edit_bucket_path(bucket) %></p>
          </div>
        <% end %>

      <% end %>
    <% end %>
  <% end %>
</div>

  <script>

    var users = <%= @users.to_json.html_safe %>
    
    var place = <%= @location.to_json.html_safe %>
    var places = <%= @locations.to_json.html_safe %>;
    var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
    let locations = [];
    var people = [];
    
    function initMap(lat, lng) {
      var myCoords = new google.maps.LatLng(lat, lng);
      var mapOptions = {
        center: myCoords,
        zoom: 16
      }
    
      var map = new google.maps.Map(document.getElementById('map'), mapOptions);
      
      for (var i = 0; i < places.length; i++) {
          locations.push({lat: places[i].latitude, lng: places[i].longitude, id: (places[i].user_id - 1)}),
          // console.log({lat: places[i].latitude, lng: places[i].longitude, id: (places[i].user_id)}),
          people.push({user: users[i], location_id: places[i]})
      }
      console.log(locations)
    
    
      var markers = locations.map(function(location, i) {
        if (location.lat != place.latitude || location.lng != place.longitude) {
          return addMarker(location, map)
        } else {
          return new google.maps.Marker({
          position: location,
        })
      }
    })
        
        var markerCluster = new MarkerClusterer(
          map,
          markers,
          {
            imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', 
            clusteringOptions: {
              eps: 10,
            }
          }
        )
    
    }
    
    function addMarker(place, map) {
      place.lat += Math.random() * (0.0015 - 0.001) + 0.0001;
      place.lng += Math.random() * (0.0015 - 0.001) + 0.0001;
      var marker = new google.maps.Marker({
        position: { lat: place.lat, lng: place.lng},
        map: map,
        icon: "https://upload.wikimedia.org/wikipedia/commons/c/ca/1x1.png"
      });  
      console.log(place)
      var infowindow = new google.maps.InfoWindow({
        
        content: "<a href='http://localhost:3000/users/" + users[place.id].id + "'><em>" + people[place.id].user.username + "</em></a>"
      });
    
      var circle = new google.maps.Circle({
        map: map,
        clickable: true,
        fillColor: '##3d94ff',
        radius: 75,
      });
    
      circle.bindTo('center', marker, 'position')
      infowindow.bindTo('center', marker, 'position')
    
      map.addListener('click', function() {
        infowindow.close(map)
      });
    
      circle.addListener('click', function() {
        map.setCenter(marker.getPosition());
        infowindow.open(map, marker)
      });
    
      return marker
    }
    
    document.addEventListener("DOMContentLoaded", function(){
        initMap(place.latitude, place.longitude)
    });
    
    </script>
    
    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js" >
    </script>